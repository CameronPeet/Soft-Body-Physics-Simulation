// Bachelor of Software Engineering
// Media Design School
// Auckland
// New Zealand
//
// (c) 2005 - 2016 Media Design School
//
// File Name   : main.cpp
// Description : Main implementation file 
// Author	   : Cameron Peet
// Mail		   : Cameron.Pee6737@mediadesignschool.com

//Includes
#include <ctime>
#include <iostream>

//Library Includes
#include <glew\glew.h>
#include <freeglut\freeglut.h>
#include <soil\SOIL.h>


//GL Math Includes
#include <glm\glm.hpp>
#include <glm\gtc\matrix_transform.hpp>
#include <glm\gtc\type_ptr.hpp>

//Local Includes
#include "Utility\ShaderLoader.h"
#include "Graphics\Camera.h"
#include "Graphics\SkyBox.h"
#include "Graphics\Light.h"
#include "Graphics\ObjModel.h"
#include "Graphics\Terrain.h"
#include "Graphics\GeometryModel.h"
#include "Physics\PhysicsWorld.h"
#include "Cloth.h"


Cloth g_Cloth;
Model model;

std::vector<Vertex2> vertices;
std::vector<GLuint> indices;


GLint viewport[4];
GLdouble MV[16];
GLdouble P[16];

glm::vec3 Up = glm::vec3(0, 1, 0), Right, viewDir;

//Local Functions
bool Init();
void Render();
void Update();
void KeyDown(unsigned char key, int x, int y);
void KeyUp(unsigned char key, int x, int y);
void Reshape(int width, int height);
void PassiveMotion(int x, int y);
void AddPhysicsObjects();
void DefineUniformBufferObjects();
void BindUBO();
bool g_WindowRunning = false;

//Global Timer for calculating deltaTime
std::clock_t g_PreviousTicks;
std::clock_t g_CurrentTicks;


//Uniform buffer objects for uniform mat4's across all shaders (Camera Projectiona nd View matrix)
GLuint g_uboMatrices;

//Global Shader Programs
ShaderLoader shaderLoader;
GLuint standardShader;
GLuint skyboxShader;
GLuint objModelShader;
GLuint terrainShader;

//Global geometry shaders
GLuint geometry_explode_shader;
GLuint geometry_show_normals;
GLuint geometry_model_star;

GLuint* AllShaders[] =
{ 
	&standardShader, 
	&skyboxShader, 
	&objModelShader, 
	&terrainShader, 
	&geometry_explode_shader,
	&geometry_show_normals,
	&geometry_model_star

};


//Global Rendering Components and CObjects
Camera g_Camera;
SkyBox g_SkyBox;
Light g_GlobalLight;
ObjModel g_Castle3D;
ObjModel g_NanoSuit;
Terrain g_Terrain3D;
GeometryModel g_ModelGS;
Model g_Sphere;


glm::vec3 g_Movement;
glm::vec2 g_MousePos;

float lastX = 600.0f, lastY = 400.0f;
float yaw = 90.0f, pitch = 0.0f;
bool firstMouse = true;


btBroadphaseInterface* broadphase;
btDefaultCollisionConfiguration* collisionConfiguration;
btCollisionDispatcher* dispatcher;
btSequentialImpulseConstraintSolver* solver;
btSoftRigidDynamicsWorld* dynamicsWorld;
btSoftBody* cloth;
btSoftBodyWorldInfo softBodyWorldInfo;


int oldX = 0, oldY = 0;
float rX = 15, rY = 0;
int state = 1;
float dist = -23;
const int GRID_SIZE = 10;

void DrawGrid()
{
	glBegin(GL_LINES);
	glColor3f(0.5f, 0.5f, 0.5f);
	for (int i = -GRID_SIZE; i <= GRID_SIZE; i++)
	{
		glVertex3f((float)i, 0, (float)-GRID_SIZE);
		glVertex3f((float)i, 0, (float)GRID_SIZE);

		glVertex3f((float)-GRID_SIZE, 0, (float)i);
		glVertex3f((float)GRID_SIZE, 0, (float)i);
	}
	glEnd();
}


//What are your start up options
int main(int argc, char ** argv)
{


	//STEP 1:
	//Defines the broadphase algorithm
	broadphase = new btDbvtBroadphase();

	//Collision configuration allows us to fine tune the algorithms used for the full collision detection (not broadphase)
	collisionConfiguration = new btSoftBodyRigidBodyCollisionConfiguration();
	dispatcher = new btCollisionDispatcher(collisionConfiguration);

	//If you introduce different types of collision objects later  on (eg meshes using btGimpactMeshShape) then we may need
	//to register a collision algorithm to get collision recognised
	//Register the collision dispatcher with an addative collison algorithm
	btGImpactCollisionAlgorithm::registerAlgorithm(dispatcher);

	//Adding a solver, this causes objects to interact properly, taking into account gravity, game logic, supplied forces, collisons and hinge constrains.
	//Does well if not pushed, bottlenecks at high performance simulations. Parralel versions available for threading models
	solver = new btSequentialImpulseConstraintSolver();

	//Instantiate the dynamics world
	dynamicsWorld = new btSoftRigidDynamicsWorld(dispatcher, broadphase, solver, collisionConfiguration);

	//Set the Gravity!
	dynamicsWorld->setGravity(btVector3(0, -9.81, 0));

	btSoftBodyWorldInfo softBodyWorldInfo;
	softBodyWorldInfo.m_broadphase = broadphase;
	softBodyWorldInfo.m_dispatcher = dispatcher;
	softBodyWorldInfo.m_gravity = dynamicsWorld->getGravity();
	softBodyWorldInfo.m_sparsesdf.Initialize();
	//Interem Code
	//Creating shapes

	const btScalar s = 4;
	const int numX = 31;
	const int numY = 31;
	const int fixed = 1 + 2;
	cloth = btSoftBodyHelpers::CreatePatch(softBodyWorldInfo,
		btVector3(-s / 2, s + 1, 0),
		btVector3(+s / 2, s + 1, 0),
		btVector3(-s / 2, s + 1, +s),
		btVector3(+s / 2, s + 1, +s),
		numX, numY,
		fixed, true);

	cloth->getCollisionShape()->setMargin(0.001f);
	cloth->generateBendingConstraints(2, cloth->appendMaterial());
	cloth->setTotalMass(10);
	//cloth->m_cfg.citerations = 10;
	//	cloth->m_cfg.diterations = 10;
	cloth->m_cfg.piterations = 5;
	cloth->m_cfg.kDP = 0.005f;
	dynamicsWorld->addSoftBody(cloth);

	glutInit(&argc, argv);
	glutInitDisplayMode(GLUT_DEPTH | GLUT_DOUBLE | GLUT_RGBA | GLUT_MULTISAMPLE);
	glutInitWindowPosition(GLUT_WINDOW_WIDTH / 2, GLUT_WINDOW_HEIGHT / 2);
	glutInitWindowSize(1200, 800);
	glutSetOption(GLUT_MULTISAMPLE, 8);
	glEnable(GL_MULTISAMPLE);
	glutCreateWindow("Adcanced Graphics - Week 9 - Height Maps");


	glClearColor(1.0f, 1.0f, 0.0f, 0.5f);               // Set background color to black and opaque
	glClearDepth(1.0f);                                 // Set background depth to farthest
	glEnable(GL_DEPTH_TEST);                            // Enable depth testing for z-culling
	glDepthFunc(GL_LEQUAL);                             // Set the type of depth-test
	glShadeModel(GL_SMOOTH);                            // Enable smooth shading
	glHint(GL_PERSPECTIVE_CORRECTION_HINT, GL_NICEST);  // Nice perspective corrections
	glutSetCursor(GLUT_CURSOR_NONE);

	glewExperimental = GL_TRUE;

	glewInit();
	Init();

	glutDisplayFunc(Render);
	glutKeyboardFunc(KeyDown);
	glutKeyboardUpFunc(KeyUp);
	glutIdleFunc(Update);
	glutReshapeFunc(Reshape);
	glutPassiveMotionFunc(PassiveMotion);

	std::cout << "hi main" << std::endl;

	glutMainLoop();

	return EXIT_SUCCESS;
}

bool Init()
{
	//Load and create shader files
	standardShader = shaderLoader.CreateProgram(
		"Assets/shaders/cloth.vert",
		"Assets/shaders/cloth.frag");

	skyboxShader = shaderLoader.CreateProgram(
		"Assets/shaders/Skybox.vs",
		"Assets/shaders/Skybox.frag");

	objModelShader = shaderLoader.CreateProgram(
		"Assets/shaders/3D_Model.vert",
		"Assets/shaders/3D_Model.frag");

	terrainShader = shaderLoader.CreateProgram(
		"Assets/shaders/heightmap.vs",
		"Assets/shaders/heightmap.fs");

	geometry_explode_shader = shaderLoader.CreateProgram(
		"Assets/shaders/geometry_explode.vs",
		"Assets/shaders/geometry_explode.frag",
		"Assets/shaders/geometry_explode.gs");

	geometry_show_normals = shaderLoader.CreateProgram(
		"Assets/shaders/geometry_show_normals.vs",
		"Assets/shaders/geometry_show_normals.frag",
		"Assets/shaders/geometry_show_normals.gs");

	geometry_model_star = shaderLoader.CreateProgram(
		"Assets/shaders/geometry_model_star.vert",
		"Assets/shaders/geometry_model_star.frag",
		"Assets/shaders/geometry_model_star.gs");

	//Camera creation
	g_Camera.SetPosition(glm::vec3(0.0f, 3, -7));
	g_Camera.SetViewPort(0, 0, 1200.0f, 800.0f);
	g_Camera.SetProjection(45.0f, (float)(1200.0f / 800.0f), 0.1f, 1000.0f);
	g_Camera.Rotate(glm::rotate(g_Camera.GetRotation(), glm::radians(180.0f), glm::vec3(0, 1, 0)));

	g_GlobalLight.Position.y += 10.0f;

	//Skybox creation
	g_SkyBox = SkyBox(CUBE,
		"Assets/skybox/right.jpg",  //Each tile is labeled according to its mapped position on a box
		"Assets/skybox/left.jpg",
		"Assets/skybox/top.jpg",
		"Assets/skybox/bottom.jpg",
		"Assets/skybox/back.jpg",
		"Assets/skybox/front.jpg");
	g_SkyBox.Initialise();

	vertices.resize(cloth->m_faces.size());
	indices.resize(cloth->m_faces.size());

	g_Cloth = Cloth(vertices, indices, "assets/textures/top.jpg");
	g_Cloth.Initialise();
	g_Cloth.m_Position = glm::vec3(0, 0, 0);
	g_Cloth.ObjectColor = glm::vec3(1.0f, 0.0f, 1.0f);

	model = Model(SPHERE, "assets/textures/top.jpg");
	model.Initialise();

	//AddPhysicsObjects();

	DefineUniformBufferObjects();
	BindUBO();
	return true;
}

void RenderOld()
{
	glClear(GL_COLOR_BUFFER_BIT | GL_DEPTH_BUFFER_BIT);
	glLoadIdentity();
	glTranslatef(0, 0, dist);
	glRotatef(rX, 1, 0, 0);
	glRotatef(rY, 0, 1, 0);

	glGetDoublev(GL_MODELVIEW_MATRIX, MV);
	viewDir.x = (float)-MV[2];
	viewDir.y = (float)-MV[6];
	viewDir.z = (float)-MV[10];
	Right = glm::cross(viewDir, Up);

	//draw polygons
	glColor3f(0, 0, 0);
	glBegin(GL_TRIANGLES);

	for (int i = 0; i< indices.size(); i += 3) {
		glm::vec3 p1 = vertices[indices[i]].pos;
		glm::vec3 p2 = vertices[indices[i + 1]].pos;
		glm::vec3 p3 = vertices[indices[i + 2]].pos;
		glVertex3f(p1.x, p1.y, p1.z);
		glVertex3f(p2.x, p2.y, p2.z);
		glVertex3f(p3.x, p3.y, p3.z);
	}
	glEnd();
}


void TestRender()
{

	glClear(GL_COLOR_BUFFER_BIT | GL_DEPTH_BUFFER_BIT);
	glLoadIdentity();
	glTranslatef(0, 0, dist);
	glRotatef(rX, 1, 0, 0);
	glRotatef(rY, 0, 1, 0);

	glGetDoublev(GL_MODELVIEW_MATRIX, MV);
	viewDir.x = (float)-MV[2];
	viewDir.y = (float)-MV[6];
	viewDir.z = (float)-MV[10];
	Right = glm::cross(viewDir, Up);

	struct
	{
		void DrawPoint(const btVector3&a)
		{
			//draw polygons
			glColor3f(0, 0, 0);
			glBegin(GL_POINT);
			glPointSize(5.0f);
			glm::vec3 p1 = glm::vec3(a[0], a[1], a[2]);
			glVertex3f(p1.x, p1.y, p1.z);
			glEnd();
		}
		void DrawLine(const btVector3&a, const btVector3& b)
		{
			//draw polygons
			glColor3f(0, 0, 0);
			glBegin(GL_TRIANGLES);
			glm::vec3 p1 = glm::vec3(a[0], a[1], a[2]);
			glm::vec3 p2 = glm::vec3(b[0], b[1], b[2]);
			glVertex3f(p1.x, p1.y, p1.z);
			glVertex3f(p2.x, p2.y, p2.z);
			glEnd();
		}
		void DrawTriangle(const btVector3& a, const btVector3& b, const btVector3&c)
		{
			//draw polygons
			glColor3f(0, 0, 0);
			glBegin(GL_TRIANGLES);
			glm::vec3 p1 = glm::vec3(a[0], a[1], a[2]);
			glm::vec3 p2 = glm::vec3(b[0], b[1], b[2]);
			glm::vec3 p3 = glm::vec3(c[0], c[1], c[2]);
			glVertex3f(p1.x, p1.y, p1.z);
			glVertex3f(p2.x, p2.y, p2.z);
			glVertex3f(p3.x, p3.y, p3.z);
			glEnd();
		}
	} *mygfx = 0;


	{
		/* Each soft body contain an array of vertices (nodes/particles_mass)   */
		btSoftBody::tNodeArray&   nodes(cloth->m_nodes);

		/* And edges (links/distances constraints)                        */
		btSoftBody::tLinkArray&   links(cloth->m_links);

		/* And finally, faces (triangles)                                 */
		btSoftBody::tFaceArray&   faces(cloth->m_faces);

		std::cout << "hi 3" << std::endl;

		/* Then, you can draw vertices...      */
		/* Node::m_x => position            */
		/* Node::m_n => normal (if meaningful)   */
		vertices.clear();
		indices.clear();
		int ndoesize = nodes.size();
		for (int j = 0; j<nodes.size(); ++j)
		{
			Vertex2 v = Vertex2();
			btVector3 p = nodes[j].m_x;
			btVector3 n = nodes[j].m_n;
			float x, y, z;
			x = p[0]; y = p[1]; z = p[2];
			v.pos = glm::vec3(x, y, z);
			v.n = glm::vec3(n[0], n[1], n[2]);
			v.uv = glm::vec2(0, 0);
			vertices.push_back(v);
			indices.push_back(j);
		}

		//std::cout << "hi 4" << std::endl;

		//std::cout << vertices.size() << std::endl;

		/* Or edges (for ropes)               */
		/* Link::m_n[2] => pointers to nodes   */

		//USE OLD RENDER
		for (int j = 0; j<links.size(); ++j)
		{
			btSoftBody::Node*   node_0 = links[j].m_n[0];
			btSoftBody::Node*   node_1 = links[j].m_n[1];

			btVector3 p1 = node_0->m_x;
			btVector3 n1 = node_0->m_n;
			btVector3 p2 = node_1->m_x;
			btVector3 n2 = node_1->m_n;

			Vertex2 v = Vertex2();
			Vertex2 v2 = Vertex2();

			v2.pos = glm::vec3(p2[0], p2[1], p2[2]);
			v.pos = glm::vec3(p1[0], p1[1], p1[2]);
			v2.n = glm::vec3(n2[0], n2[1], n2[2]);
			v.n = glm::vec3(n1[0], n1[1], n1[2]);
			v2.uv = glm::vec2(0, 0);
			v.uv = glm::vec2(0, 0);

			vertices.push_back(v);
			vertices.push_back(v2);


			mygfx->DrawLine(node_0->m_x, node_1->m_x);

			/* Or if you need indices...      */
			const int indicess[] = { int(node_0 - &nodes[0]), int(node_1 - &nodes[0]) };
			indices.push_back(int(node_0 - &nodes[0]));
			indices.push_back(int(node_1 - &nodes[0]));

		}

		/* And even faces                  */
		/* Face::m_n[3] -> pointers to nodes   */
		int index = 0;
		for (int j = 0; j<faces.size(); ++j)
		{
			btSoftBody::Node*   node_0 = faces[j].m_n[0];
			btSoftBody::Node*   node_1 = faces[j].m_n[1];
			btSoftBody::Node*   node_2 = faces[j].m_n[2];
			mygfx->DrawTriangle(node_0->m_x, node_1->m_x, node_2->m_x);




			btVector3 p1 = node_0->m_x;
			btVector3 n1 = node_0->m_n;
			btVector3 p2 = node_1->m_x;
			btVector3 n2 = node_1->m_n;
			btVector3 p3 = node_2->m_x;
			btVector3 n3 = node_2->m_n;

			Vertex2 v = Vertex2();
			Vertex2 v1 = Vertex2();
			Vertex2 v2 = Vertex2();

			v1.pos = glm::vec3(p3[0], p3[1], p3[2]);
			v1.n = glm::vec3(n3[0], n3[1], n3[2]);
			v1.uv = glm::vec2(0, 0);

			v1.pos = glm::vec3(p2[0], p2[1], p2[2]);
			v1.n = glm::vec3(n2[0], n2[1], n2[2]);
			v1.uv = glm::vec2(0, 0);

			v.pos = glm::vec3(p1[0], p1[1], p1[2]);
			v.n = glm::vec3(n1[0], n1[1], n1[2]);
			v.uv = glm::vec2(0, 0);

			vertices.push_back(v);
			vertices.push_back(v1);
			vertices.push_back(v2);


			//mygfx->DrawLine(node_0->m_x, node_1->m_x);
			/* Or if you need indices...      */
			const int indicess[] =
			{ int(node_0 - &nodes[0]),
				int(node_1 - &nodes[0]),
				int(node_2 - &nodes[0]) };
			/* Or if you need indices...      */

			indices.push_back(int(node_0 - &nodes[0]));
			indices.push_back(int(node_1 - &nodes[0]));
			indices.push_back(int(node_2 - &nodes[0]));

		}
	}

}

void Render()
{
	std::cout << "hi render" << std::endl;
	glClearColor(1.0f, 1.0f, 1.0f, 1.0f);
	glClear(GL_COLOR_BUFFER_BIT | GL_DEPTH_BUFFER_BIT);
	
	//Update the uniform buffer objects in the shaders with the latest proj and view matrix
	BindUBO();
	g_SkyBox.Render(skyboxShader, g_Camera);
	//g_Cloth.Render(standardShader, g_Camera, vertices, model.indices);
	//g_Sphere.Render(standardShader, g_Camera);
	TestRender();

	glBindVertexArray(0);
	glutSwapBuffers();
}
void Update()
{
	g_CurrentTicks = std::clock();
	float deltaTicks = (float)(g_CurrentTicks - g_PreviousTicks);

	float fDeltaTime = deltaTicks / (float)CLOCKS_PER_SEC;

	dynamicsWorld->stepSimulation(fDeltaTime);
	g_PreviousTicks = g_CurrentTicks;


	glUseProgram(0);
	g_Camera.Translate(g_Movement * 10.0f * fDeltaTime);
	g_WindowRunning = true;
	Sleep(10);
	glutPostRedisplay();
}
void KeyDown(unsigned char key, int x, int y)
{
	switch (key)
	{
	case 'w':
	case 'W':
		g_Movement.z = -1.0f;
		break;
	case 'a':
	case 'A':
		g_Movement.x = -1.0f;
		break;
	case 's':
	case 'S':
		g_Movement.z = 1.0f;
		break;
	case 'd':
	case 'D':
		g_Movement.x = 1.0f;
		break;
	case 'q':
	case 'Q':
		g_Movement.y = -1.0f;
		break;
	case 'e':
	case 'E':
		g_Movement.y = 1.0f;
		break;

	case VK_ESCAPE:
		glutLeaveMainLoop();
		break;
	default:
		break;
	}
}
void KeyUp(unsigned char key, int x, int y)
{
	switch (key)
	{
	case 'w':
	case 'W':
		g_Movement.z = 0.f;
		break;
	case 'a':
	case 'A':
		g_Movement.x = 0.f;
		break;
	case 's':
	case 'S':
		g_Movement.z = 0.f;
		break;
	case 'd':
	case 'D':
		g_Movement.x = 0.f;
		break;
	case 'q':
	case 'Q':
		g_Movement.y = 0.f;
		break;
	case 'e':
	case 'E':
		g_Movement.y = 0.f;
		break;
	default:
		break;
	}
}

void Reshape(int width, int height)
{
	if (height == 0)
	{
		height = 1;
	}

	g_Camera.SetViewPort(0, 0, width, height);
	g_Camera.SetProjection(45.0f, (float)(width / height), 0.1f, 1000.0f);
}


void ResetPointer()
{
	glutWarpPointer(600, 400);
	glutSetCursor(GLUT_CURSOR_NONE);
	lastX = 600.0f;
	lastY = 400.0f;
}

void PassiveMotion(int x, int y)
{
	static bool sJustWarped = false;

	if (sJustWarped) {
		sJustWarped = false;
		return;
	}

	GLfloat xoffset = x - lastX;
	GLfloat yoffset = lastY - y;

	lastX = static_cast<float>(x);
	lastY = static_cast<float>(y);

	GLfloat sensitivity = 0.005f;
	xoffset *= sensitivity;
	yoffset *= sensitivity;

	yaw += xoffset;
	pitch += yoffset;

	if (pitch > 89.0f)
		pitch = 89.0f;
	if (pitch < -89.0f)
		pitch = -89.0f;



	g_Camera.SetRotation(glm::quat());
	g_Camera.Rotate(glm::angleAxis(-yaw, glm::vec3(0, 1, 0)));
	g_Camera.Rotate(glm::angleAxis(pitch, glm::vec3(1, 0, 0)));


	ResetPointer();
	sJustWarped = true;
}



void DefineUniformBufferObjects()
{

	int size = sizeof(AllShaders) / sizeof(AllShaders[0]);
	for (int i = 0; i < size; i++)
	{
		GLuint uniformBlockIndex = glGetUniformBlockIndex(*AllShaders[i], "Matrices");
		glUniformBlockBinding(*AllShaders[i], uniformBlockIndex, 0);
	}

	glGenBuffers(1, &g_uboMatrices);

	glBindBuffer(GL_UNIFORM_BUFFER, g_uboMatrices);
	glBufferData(GL_UNIFORM_BUFFER, 2 * sizeof(glm::mat4), NULL, GL_STATIC_DRAW);
	glBindBuffer(GL_UNIFORM_BUFFER, 0);
	glBindBufferRange(GL_UNIFORM_BUFFER, 0, g_uboMatrices, 0, 2 * sizeof(glm::mat4));
}

void BindUBO()
{
	glBindBuffer(GL_UNIFORM_BUFFER, g_uboMatrices);
	glBufferSubData(GL_UNIFORM_BUFFER, 0 * sizeof(glm::mat4), sizeof(glm::mat4), glm::value_ptr(g_Camera.GetProjectionMatrix()));
	glBindBuffer(GL_UNIFORM_BUFFER, 0);

	glBindBuffer(GL_UNIFORM_BUFFER, g_uboMatrices);
	glBufferSubData(GL_UNIFORM_BUFFER, 1 * sizeof(glm::mat4), sizeof(glm::mat4), glm::value_ptr(g_Camera.GetViewMatrix()));
	glBindBuffer(GL_UNIFORM_BUFFER, 0);
}


//void AddPhysicsObjects()
//{
//	//List shapes being made
//	btRigidBody* ground;
//	btRigidBody* sphere;
//
//
//
//
//	//Creating shapes
//	btCollisionShape* groundShape = new btStaticPlaneShape(btVector3(0, 1, 0), 1);
//	btCollisionShape* fallShape = new btSphereShape(1);
//
//
//	//Creating Rigid Bodies
//	btDefaultMotionState* groundMotionState = new btDefaultMotionState(btTransform(btQuaternion(0, 0, 0, 1), btVector3(0, -1, 0)));
//	btRigidBody::btRigidBodyConstructionInfo
//		groundRigidBodyCI(0, groundMotionState, groundShape, btVector3(0, 0, 0));
//	ground = new btRigidBody(groundRigidBodyCI);
//	g_PhysicsWorld.dynamicsWorld->addRigidBody(ground);
//
//	btDefaultMotionState* fallMotionState =
//		new btDefaultMotionState(btTransform(btQuaternion(0, 0, 0, 1), btVector3(0, 50, 0)));
//	btScalar mass = 1;
//	btVector3 fallInertia(0, 0, 0);
//	fallShape->calculateLocalInertia(mass, fallInertia);
//	btRigidBody::btRigidBodyConstructionInfo  fallRigidBodyCI(mass, fallMotionState, fallShape, fallInertia);
//	sphere = new btRigidBody(fallRigidBodyCI);
//	
//	g_PhysicsWorld.dynamicsWorld->addRigidBody(sphere);
//
//	g_Sphere.body = sphere;
//}



	//glLoadIdentity();
	//glTranslatef(0, 0, dist);
	//glRotatef(rX, 1, 0, 0);
	//glRotatef(rY, 0, 1, 0);

	//glGetDoublev(GL_MODELVIEW_MATRIX, MV);
	//viewDir.x = (float)-MV[2];
	//viewDir.y = (float)-MV[6];
	//viewDir.z = (float)-MV[10];
	//Right = glm::cross(viewDir, Up);

	//glColor4f(1, 0, 0, 1.0f);

	//struct
	//{
	//	void DrawPoint(const btVector3&a)
	//	{
	//		//draw polygons
	//		glColor3f(0, 1, 0);
	//		glBegin(GL_POINT);
	//		glPointSize(1.0f);
	//		glm::vec3 p1 = glm::vec3(a[0], a[1], a[2]);
	//		glVertex3f(p1.x, p1.y, p1.z);
	//		glEnd();
	//	}
	//	void DrawLine(const btVector3&a, const btVector3& b)
	//	{
	//		//draw polygons
	//		glColor3f(0, 0, 1);
	//		glBegin(GL_TRIANGLES);
	//		glm::vec3 p1 = glm::vec3(a[0], a[1], a[2]);
	//		glm::vec3 p2 = glm::vec3(b[0], b[1], b[2]);
	//		glVertex3f(p1.x, p1.y, p1.z);
	//		glVertex3f(p2.x, p2.y, p2.z);
	//		glEnd();
	//	}
	//	void DrawTriangle(const btVector3& a, const btVector3& b, const btVector3&c)
	//	{
	//		//draw polygons
	//		glColor3f(1, 0, 0);
	//		glBegin(GL_TRIANGLES);
	//		glm::vec3 p1 = glm::vec3(a[0], a[1], a[2]);
	//		glm::vec3 p2 = glm::vec3(b[0], b[1], b[2]);
	//		glm::vec3 p3 = glm::vec3(c[0], c[1], c[2]);
	//		glVertex3f(p1.x, p1.y, p1.z);
	//		glVertex3f(p2.x, p2.y, p2.z);
	//		glVertex3f(p3.x, p3.y, p3.z);
	//		glEnd();
	//	}
	//} *mygfx = 0;

